name: New Windows Base Version â›­

on:
  repository_dispatch:
    types:
      - new_base_images_requested
      - new_windows_base_image_requested
  workflow_dispatch:
    inputs:
      jobId:
        description: 'Job ID'
        required: true
        default: 'dryRun'
      repoVersionFull:
        description: 'All digits of the latest tag of this repository, e.g. `1.23.45`'
        required: true
      repoVersionMinor:
        description: 'Minor digit of that tag, e.g. `23`'
        required: true
      repoVersionMajor:
        description: 'Major digit of that tag, e.g. `1`'
        required: true

# Further reading:
# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#repository_dispatch
# https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#create-a-repository-dispatch-event
# https://developer.github.com/webhooks/event-payloads/#repository_dispatch

jobs:
  build:
    name: "ðŸ›  Build unityci/base"
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      #################
      #   Variables   #
      #################
      - name: Setup Build Parameters
        id: buildParameters
        run: |
              if (${{ github.event.inputs.jobId }})
              {
                # Workflow Dispatch
                echo '::set-output jobId=${{ github.event.inputs.jobId }}'
                echo '::set-output repoVersionFull=${{ github.event.inputs.repoVersionFull }}'
                echo '::set-output repoVersionMinor=${{ github.event.inputs.repoVersionMinor }}'
                echo '::set-output repoVersionMajor=${{ github.event.inputs.repoVersionMajor }}'
              } else
              {
                # Repo Dispatch
                echo '::set-output jobId=${{ github.event.client_payload.jobId }}'
                echo '::set-output repoVersionFull=${{ github.event.client_payload.repoVersionFull }}'
                echo '::set-output repoVersionMinor=${{ github.event.client_payload.repoVersionMinor }}'
                echo '::set-output repoVersionMajor=${{ github.event.client_payload.repoVersionMajor }}'
              }

      - name: Show hook input
        run: |
          echo "Event ${{ github.event.event_type }}"
          echo "jobId: ${{ steps.buildParameters.outputs.jobId }}"
          echo "repoVersion (full): ${{ steps.buildParameters.outputs.repoVersionFull }}"
          echo "repoVersion (only minor and major): ${{ steps.buildParameters.outputs.repoVersionMinor }}"
          echo "repoVersion (only major): ${{ steps.buildParameters.outputs.repoVersionMajor }}"

      - name: Report new build
        uses: ./.github/workflows/actions/report-to-backend
        with:
          token: ${{ secrets.VERSIONING_TOKEN }}
          jobId: ${{ steps.buildParameters.outputs.jobId }}
          status: started
          # Build info
          imageType: base
          baseOs: windows
          repoVersion: ${{ steps.buildParameters.outputs.repoVersionFull }}

      #############
      #   Setup   #
      #############
      - name: Login to DockerHub
        env:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        run: docker login --username $Env:username --password $Env:password
      - name: Check if image not already exists
        run: |
          # Source: https://stackoverflow.com/a/39731444/3593896
          function Docker-Tag-Exists {
            [CmdletBinding()]
            param(
                [string] $Repository,
                [string] $Tag
            )
            $Image = $Repository+":"+$Tag
            docker manifest inspect $Image | Out-Null
            return $?
          }

          if( (Docker-Tag-Exists -Repository unityci/base -Tag windows-${{ steps.buildParameters.outputs.repoVersionFull }}) ) {
            echo "Image already exists. Exiting."
            exit 1
          }

      # TODO: Cache layers, currently not supported on windows

      ##################
      #   Base image   #
      ##################
      - name: Build and Publish Windows Base Image
        id: build_windows_base_image
        run: |
              docker build ./images/windows/base/ `
                --tag unityci/base:windows-${{ steps.buildParameters.outputs.repoVersionFull }} `
                --tag unityci/base:windows-${{ steps.buildParameters.outputs.repoVersionMinor }} `
                --tag unityci/base:windows-${{ steps.buildParameters.outputs.repoVersionMajor }} `
                --tag unityci/base:windows-latest `
                --push
              $imageDetails = docker buildx imagetools inspect unityci/base:windows-${{ steps.buildParameters.outputs.repoVersionFull }} | ConvertFrom-Json
              echo '::set-output digest=$imageDetails.config.digest'

      - name: Inspect
        run: |
              docker buildx imagetools inspect unityci/base:windows-${{ steps.buildParameters.outputs.repoVersionFull }}

      - name: Image digest
        run: echo ${{ steps.build_windows_base_image.outputs.digest }}

      #################
      #   reporting   #
      #################
      - name: Report publication
        if: ${{ success() }}
        uses: ./.github/workflows/actions/report-to-backend
        with:
          token: ${{ secrets.VERSIONING_TOKEN }}
          jobId: ${{ steps.buildParameters.outputs.jobId }}
          status: published
          # Build info
          imageType: base
          baseOs: windows
          repoVersion: ${{ steps.buildParameters.outputs.repoVersionFull }}
          # Publication info
          imageRepo: unityci
          imageName: base
          friendlyTag: windows-${{ steps.buildParameters.outputs.repoVersionMinor }}
          specificTag: windows-${{ steps.buildParameters.outputs.repoVersionFull }}
          digest: ${{ steps.build_windows_base_image.outputs.digest }}

      - name: Report failure
        if: ${{ failure() || cancelled() }}
        uses: ./.github/workflows/actions/report-to-backend
        with:
          token: ${{ secrets.VERSIONING_TOKEN }}
          jobId: ${{ steps.buildParameters.outputs.jobId }}
          status: failed
          # Build info
          imageType: base
          baseOs: windows
          repoVersion: ${{ steps.buildParameters.outputs.repoVersionFull }}
          # Failure info
          reason: ${{ job.status }}
