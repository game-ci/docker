name: PR ðŸ˜Ž

on:
  pull_request_target: {}

jobs:
  reportingTest:
    name: "ðŸ§ª Test reporting system (${{ matrix.imageType }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jobId:
          - dryRun # specifically use `dryRun` for testing.
        imageType:
          - base
          - hub
          - editor
        baseOs:
          - ubuntu
        repoVersion:
          - 0.1
        include:
          - imageType: editor
            editorVersion: 2020.1.4f1
            targetPlatform: android
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Report new build
        uses: ./.github/workflows/actions/report-to-backend
        with:
          token: ${{ secrets.VERSIONING_TOKEN }}
          jobId: ${{ matrix.jobId }}
          status: started
          # Build info
          imageType: ${{ matrix.imageType }}
          baseOs: ${{ matrix.baseOs }}
          repoVersion: ${{ matrix.repoVersion }}
          editorVersion: ${{ matrix.editorVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
      - name: Report build failure
        uses: ./.github/workflows/actions/report-to-backend
        with:
          token: ${{ secrets.VERSIONING_TOKEN }}
          jobId: ${{ matrix.jobId }}
          status: failed
          # Build info
          imageType: ${{ matrix.imageType }}
          baseOs: ${{ matrix.baseOs }}
          repoVersion: ${{ matrix.repoVersion }}
          editorVersion: ${{ matrix.editorVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          # Failed specific
          reason: 'no real reason'
      - name: Report publication
        uses: ./.github/workflows/actions/report-to-backend
        with:
          token: ${{ secrets.VERSIONING_TOKEN }}
          jobId: ${{ matrix.jobId }}
          status: published
          # Build info
          imageType: ${{ matrix.imageType }}
          baseOs: ${{ matrix.baseOs }}
          repoVersion: ${{ matrix.repoVersion }}
          editorVersion: ${{ matrix.editorVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          # Published specific
          imageRepo: unityci
          imageName: ${{ matrix.imageType }}
          friendlyTag: ${{ matrix.editorVersion }}-${{ matrix.targetPlatform }}-${{ matrix.repoVersion }}
          specificTag: ${{ matrix.baseOs }}-${{ matrix.editorVersion }}-${{ matrix.targetPlatform }}-${{ matrix.repoVersion }}
          digest: sha256:ef872b67450a680fbeebe1b037190b8f8fbfb04088531f422873915520e26e0f;

  build-ubuntu:
    name: "ðŸ§ª Test build Ubuntu (${{ matrix.targetPlatform }})"
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          # This list of target platforms is based on Ubuntu as a base platform
          - base

          # Linux Build Support
          # - linux-mono # May not exist in newer versions / May be default for Ubuntu
          - linux-il2cpp # May not exist in older versions

          # Windows Build Support
          - windows-mono
          # - windows-il2cpp # May not exist for ubuntu

          # MacOS Build Support
          - mac-mono
          # - mac-il2cpp # May not exist for ubuntu

          # iOS Build Support
          - ios

          # Android Build Support
          - android

          # WebGL Build support
          - webgl

          # Non-priorities: (but able to support)
          #  - vuforia-ar # Vuforia Augmented Reality Support
          #  - appletv # tvOS Build Support
          #  - samsung # SamsungTV Build Support
          #  - tizen # Tizen Build Support
          #  - lumin # Lumin OS (Magic Leap) Build Support

          # Tools: (probably included in build support packs)
          # - android-sdk-ndk-tools # Android SDK & NDK Tools
          # - android-open-jdk # OpenJDK
          # - monodevelop # MonoDevelop / Unity Debugger

    steps:
      #############
      #   Setup   #
      #############
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-pr-${{ matrix.targetPlatform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-pr-${{ matrix.targetPlatform }}
            ${{ runner.os }}-buildx-${{ matrix.targetPlatform }}
            ${{ runner.os }}-buildx-

      #######################
      #   Free disk space   #
      #######################
      - name: Free disk space
        run: .github/workflows/scripts/free_disk_space.sh

      ##################
      #   Base image   #
      ##################
      - name: Build base image # and push
        uses: docker/build-push-action@v2
        id: build_ubuntu_base_image
        with:
          file: ./images/ubuntu/base/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: localhost:5000/unityci/base:latest
      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/unityci/base:latest

      #################
      #   Hub image   #
      #################
      - name: Build hub image # and push
        uses: docker/build-push-action@v2
        id: build_ubuntu_hub_image
        with:
          file: ./images/ubuntu/hub/Dockerfile
          build-args: |
            baseImage=localhost:5000/unityci/base:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: localhost:5000/unityci/hub:latest
      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/unityci/hub:latest

      ####################
      #   Editor image   #
      ####################
      - name: Build editor image # and push
        uses: docker/build-push-action@v2
        id: build_editor_image
        with:
          file: ./images/ubuntu/editor/Dockerfile
          build-args: |
            hubImage=localhost:5000/unityci/hub:latest
            baseImage=localhost:5000/unityci/base:latest
            version=2020.1.4f1
            changeSet=fa717bb873ec
            module=${{ matrix.targetPlatform }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: localhost:5000/unityci/editor:latest
      - name: Inspect
        run: |
          docker buildx imagetools inspect localhost:5000/unityci/editor:latest

      ###############
      #   Metrics   #
      ###############
      - name: Disk space after
        if: always()
        run: df -h

  build-windows:
    name: "ðŸ§ª Test build Windows (${{ matrix.targetPlatform }})"
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - base
          - windows-il2cpp
          - universal-windows-platform
          - appletv

    steps:
      #############
      #   Setup   #
      #############
      - name: Checkout
        uses: actions/checkout@v2

      #######################
      #   Free disk space   #
      #######################
      # TODO: Determine what we can free on windows
      ##################
      #   Base image   #
      ##################
      - name: Build Windows Base Image # and push
        id: build_windows_base_image
        run: |
              docker build ./images/windows/base/ `
                --tag localhost:5000/unityci/base:windows-latest `
                --push
      - name: Inspect
        run: |
          docker inspect unityci/base:windows-latest

      #################
      #   Hub image   #
      #################
      - name: Build Windows Hub Image # and push
        id: build_windows_hub_image
        run: |
              docker build ./images/windows/hub/ `
                --build-arg baseImage=localhost:5000/unityci/base:windows-latest
                --tag localhost:5000/unityci/hub:windows-latest `
                --push
      - name: Inspect
        run: |
          docker inspect unityci/hub:windows-latest

      ####################
      #   Editor image   #
      ####################
      - name: Build Windows Editor Image # and push
        id: build_windows_editor_image
        run: |
              docker build ./images/windows/editor/ `
                --build-arg baseImage=unityci/base:windows-latest `
                --build-arg hubImage=unityci/hub:windows-latest `
                --build-arg version=2020.1.4f1 `
                --build-arg changeSet=fa717bb873ec `
                --build-arg module=${{ matrix.targetPlatform }} `
                --tag unityci/editor:windows-latest

      - name: Inspect
        run: |
          docker inspect unityci/editor:windows-latest

      ###############
      #   Metrics   #
      ###############
      - name: Disk space after
        if: always()
        run: get-PSDrive

  testImages-ubuntu:
    name: ðŸ§ª Test images
    needs: [ build-ubuntu ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - run: echo "not implemented"
        # TODO - Add test that checks if a license is valid after the changes to a dockerfile (hardware id verification)
