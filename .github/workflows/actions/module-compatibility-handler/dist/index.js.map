{"version":3,"file":"index.js","mappingstDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzlBA;;;;;;;ACAA;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../webpack://module-compatibility-handler/./lib/check-module-compatibility.js","../webpack://module-compatibility-handler/./lib/compare-unity-versions.js","../webpack://module-compatibility-handler/./lib/index.js","../webpack://module-compatibility-handler/./lib/module-handler.js","../webpack://module-compatibility-handler/./lib/two-way-map.js","../webpack://module-compatibility-handler/./node_modules/@actions/core/lib/command.js","../webpack://module-compatibility-handler/./node_modules/@actions/core/lib/core.js","../webpack://module-compatibility-handler/./node_modules/@actions/core/lib/file-command.js","../webpack://module-compatibility-handler/./node_modules/@actions/core/lib/utils.js","../webpack://module-compatibility-handler/external node-commonjs \"fs\"","../webpack://module-compatibility-handler/external node-commonjs \"os\"","../webpack://module-compatibility-handler/external node-commonjs \"path\"","../webpack://module-compatibility-handler/webpack/bootstrap","../webpack://module-compatibility-handler/webpack/runtime/compat","../webpack://module-compatibility-handler/webpack/before-startup","../webpack://module-compatibility-handler/webpack/startup","../webpack://module-compatibility-handler/webpack/after-startup"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isSupportedMacModule = exports.isSupportedLinuxModule = exports.isSupportedWindowsModule = void 0;\r\nconst module_handler_1 = require(\"./module-handler\");\r\nconst two_way_map_1 = require(\"./two-way-map\");\r\n/**\r\n * Incompatible versions for different modules for different platforms\r\n * Format is a map with key module and value Array<string>\r\n * The array should contain filters for incompatible versions\r\n * You only have to specify incompatibility if the modules are only\r\n * incompatible with gameCI, modules that inherently aren't compatible\r\n * with an editor version are automatically filtered. The module names\r\n * should be the original names from Unity. For example you should use\r\n * uwp-il2cpp for appropriate versions, not just universal-windows-platform.\r\n *\r\n * Filter formats\r\n * - Singular version ie: '2019.3.10f1'\r\n * Indicates that specific version is not compatible.\r\n *\r\n * - Unbounded bottom range ie: '-2019.3.0f1'\r\n * Indicates all versions below the upper bound, but not including\r\n * the upper bound are incompatible. In this example, everything\r\n * below 2019.3.0f1 is considered incompatible but 2019.3.0f1 is\r\n * considered compatible\r\n *\r\n * - Unbounded upper range ie: '2019.3.0f1-'\r\n * Indicates all versions above the bottom bound, and including the\r\n * bottom bound are incompatible. In this example all versions above\r\n * 2019.3.0f1 are considered incompatible and 2019.3.0f1 is also\r\n * considered incompatible\r\n *\r\n * - Fully bounded range ie: '2019.3.0f1-2019.3.3f1'\r\n * Same rules as the unbounded versions. Anything above or equal to 2019.3.0f1\r\n * but less than but not equal to 2019.3.3f1 is considered incompatible\r\n */\r\nconst incompatibleLinuxModules = new Map([['android', ['-2019.3.0f1']]]); // We don't support Android images for Linux below 2019.3.0f1\r\nconst incompatibleWindowsModules = new Map();\r\nconst incompatibleMacModules = new Map();\r\n/**\r\n * Unity has renamed various modules over the course of updating the Editor.\r\n * For example uwp-il2cpp became universal-windows-platform. This TwoWayMap is designed\r\n * to allow us to map those renamed modules in a consistent way. The structure is\r\n * key: the original name, value: the mapped name.\r\n *\r\n * Example:\r\n * uwp-il2cpp was renamed to universal-windows-platform. We will standardize to\r\n * universal-windows-platform so the mapping will be uwp-il2cpp: universal-windows-platform.\r\n */\r\nconst renamedLinuxModules = new two_way_map_1.TwoWayMap(new Map());\r\nconst renamedWindowsModules = new two_way_map_1.TwoWayMap(new Map([['uwp-il2cpp', 'universal-windows-platform']]));\r\nconst renamedMacModules = new two_way_map_1.TwoWayMap(new Map());\r\nconst isSupportedWindowsModule = async (editorVersion, editorChangeset, module) => {\r\n    const windowsModules = await (0, module_handler_1.getModules)(editorVersion, editorChangeset, 'win');\r\n    let realWindowsModuleName = '';\r\n    // Fix any renamed modules\r\n    for (let i = 0; i < windowsModules.length; ++i) {\r\n        if (renamedWindowsModules.has(windowsModules[i])) {\r\n            // If the renamed module is the one we are checking, note its real name\r\n            if (renamedWindowsModules.get(windowsModules[i]) === module) {\r\n                realWindowsModuleName = windowsModules[i];\r\n            }\r\n            windowsModules[i] = renamedWindowsModules.get(windowsModules[i]);\r\n        }\r\n    }\r\n    // No rename occurred\r\n    if (realWindowsModuleName === '') {\r\n        realWindowsModuleName = module;\r\n    }\r\n    const compatibleWindowsModules = (0, module_handler_1.filterIncompatibleModules)(editorVersion, windowsModules, incompatibleWindowsModules);\r\n    // Add on base to the requested modules and put into a set to ensure no duplicates\r\n    const moduleSet = new Set([...compatibleWindowsModules, 'base']);\r\n    // Return whether the module is supported and what the real name is for the module\r\n    return [moduleSet.has(module), realWindowsModuleName];\r\n};\r\nexports.isSupportedWindowsModule = isSupportedWindowsModule;\r\nconst isSupportedLinuxModule = async (editorVersion, editorChangeset, module) => {\r\n    const linuxModules = await (0, module_handler_1.getModules)(editorVersion, editorChangeset, 'linux');\r\n    let realLinuxModuleName = '';\r\n    // Fix any renamed modules\r\n    for (let i = 0; i < linuxModules.length; ++i) {\r\n        if (renamedLinuxModules.has(linuxModules[i])) {\r\n            // If the renamed module is the one we are checking, note its real name\r\n            if (renamedLinuxModules.get(linuxModules[i]) === module) {\r\n                realLinuxModuleName = linuxModules[i];\r\n            }\r\n            linuxModules[i] = renamedLinuxModules.get(linuxModules[i]);\r\n        }\r\n    }\r\n    // No rename occurred\r\n    if (realLinuxModuleName === '') {\r\n        realLinuxModuleName = module;\r\n    }\r\n    const compatibleLinuxModules = (0, module_handler_1.filterIncompatibleModules)(editorVersion, linuxModules, incompatibleLinuxModules);\r\n    //Add on base to the requested modules and put into a set to ensure no duplicates\r\n    const moduleSet = new Set([...compatibleLinuxModules, 'base']);\r\n    // Return whether the module is supported and what the real name is for the module\r\n    return [moduleSet.has(module), realLinuxModuleName];\r\n};\r\nexports.isSupportedLinuxModule = isSupportedLinuxModule;\r\nconst isSupportedMacModule = async (editorVersion, editorChangeset, module) => {\r\n    const macModules = await (0, module_handler_1.getModules)(editorVersion, editorChangeset, 'osx');\r\n    let realMacModuleName = '';\r\n    // Fix any renamed modules\r\n    for (let i = 0; i < macModules.length; ++i) {\r\n        if (renamedMacModules.has(macModules[i])) {\r\n            // If the renamed module is the one we are checking, note its real name\r\n            if (renamedMacModules.get(macModules[i]) === module) {\r\n                realMacModuleName = macModules[i];\r\n            }\r\n            macModules[i] = renamedMacModules.get(macModules[i]);\r\n        }\r\n    }\r\n    // No rename occurred\r\n    if (realMacModuleName === '') {\r\n        realMacModuleName = module;\r\n    }\r\n    const compatibleMacModules = (0, module_handler_1.filterIncompatibleModules)(editorVersion, macModules, incompatibleMacModules);\r\n    //Add on base to the requested modules and put into a set to ensure no duplicates\r\n    const moduleSet = new Set([...compatibleMacModules, 'base']);\r\n    // Return whether the module is supported and what the real name is for the module\r\n    return [moduleSet.has(module), realMacModuleName];\r\n};\r\nexports.isSupportedMacModule = isSupportedMacModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.compareVersions = void 0;\r\n/**\r\n * Compares Unity Versions\r\n * Returns -1 if versionA is less than versionB\r\n * Returns 1 if versionA is greater than versionB\r\n * Returns 0 if the versions are identical\r\n */\r\nfunction compareVersions(versionA, versionB) {\r\n    const [majorA, minorA, patchAWithVersionType] = versionA.split('.');\r\n    const [majorB, minorB, patchBWithVersionType] = versionB.split('.');\r\n    // Removing the 'fX' part of the string\r\n    const patchA = patchAWithVersionType.slice(0, patchAWithVersionType.length - 2);\r\n    const patchB = patchBWithVersionType.slice(0, patchBWithVersionType.length - 2);\r\n    // Get the release type (a, b, f)\r\n    const releaseTypeA = patchAWithVersionType[patchAWithVersionType.length - 2];\r\n    const releaseTypeB = patchBWithVersionType[patchBWithVersionType.length - 2];\r\n    // Get the number after release type\r\n    const releaseNumberA = patchAWithVersionType[patchAWithVersionType.length - 1];\r\n    const releaseNumberB = patchBWithVersionType[patchBWithVersionType.length - 1];\r\n    if (majorA > majorB) {\r\n        return 1;\r\n    }\r\n    if (majorA < majorB) {\r\n        return -1;\r\n    }\r\n    if (minorA > minorB) {\r\n        return 1;\r\n    }\r\n    if (minorA < minorB) {\r\n        return -1;\r\n    }\r\n    if (patchA > patchB) {\r\n        return 1;\r\n    }\r\n    if (patchA < patchB) {\r\n        return -1;\r\n    }\r\n    if (releaseTypeA > releaseTypeB) {\r\n        return 1;\r\n    }\r\n    if (releaseTypeA < releaseTypeB) {\r\n        return -1;\r\n    }\r\n    if (releaseNumberA > releaseNumberB) {\r\n        return 1;\r\n    }\r\n    if (releaseNumberA < releaseNumberB) {\r\n        return -1;\r\n    }\r\n    // All fields are identical\r\n    return 0;\r\n}\r\nexports.compareVersions = compareVersions;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst core = __importStar(require(\"@actions/core\"));\r\nconst check_module_compatibility_1 = require(\"./check-module-compatibility\");\r\nconst action = async () => {\r\n    // Take input from workflow\r\n    const editorChangeset = core.getInput('editorChangeset', { required: true });\r\n    const editorVersion = core.getInput('editorVersion', { required: true });\r\n    const editorModule = core.getInput('editorModule', { required: true });\r\n    switch (process.platform) {\r\n        case 'win32':\r\n            const [supportedWindowsModule, realWindowsModuleName] = await (0, check_module_compatibility_1.isSupportedWindowsModule)(editorVersion, editorChangeset, editorModule);\r\n            if (supportedWindowsModule) {\r\n                core.setOutput('shouldBuild', true);\r\n                core.setOutput('moduleRealName', realWindowsModuleName);\r\n            }\r\n            else {\r\n                core.setOutput('shouldBuild', false);\r\n            }\r\n            return;\r\n        case 'linux':\r\n            const [supportedLinuxModule, realLinuxModuleName] = await (0, check_module_compatibility_1.isSupportedLinuxModule)(editorVersion, editorChangeset, editorModule);\r\n            if (supportedLinuxModule) {\r\n                core.setOutput('shouldBuild', true);\r\n                core.setOutput('moduleRealName', realLinuxModuleName);\r\n            }\r\n            else {\r\n                core.setOutput('shouldBuild', false);\r\n            }\r\n            return;\r\n        default:\r\n            core.setFailed('Incompatible base OS');\r\n            return;\r\n    }\r\n};\r\naction().catch((err) => {\r\n    core.setFailed(err);\r\n});\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.filterIncompatibleModules = exports.getModules = void 0;\r\nconst compare_unity_versions_1 = require(\"./compare-unity-versions\");\r\nconst reMatchUnityModuleNames = new RegExp(`\\\\[(.*?)\\\\]`, 'gm');\r\nconst UNITY_DOWNLOAD_API_URL = 'https://download.unity3d.com/download_unity/';\r\n//Fetches all supported modules for a specific verion of unity on a given base platform\r\nasync function getModules(version, changeset, platform) {\r\n    // Get the config file that details all modules available to the version\r\n    const res = await fetch(`${UNITY_DOWNLOAD_API_URL}/${changeset}/unity-${version}-${platform}.ini`);\r\n    if (res.status >= 400) {\r\n        throw new Error('Bad response from Unity API');\r\n    }\r\n    const responseBody = await res.text();\r\n    const moduleSet = new Array();\r\n    // Pull out each module name using regex\r\n    const reMatchedModules = responseBody.matchAll(reMatchUnityModuleNames);\r\n    // Add names to a set that we return\r\n    let module = reMatchedModules.next();\r\n    while (!module.done) {\r\n        moduleSet.push(module.value[1].toLowerCase());\r\n        module = reMatchedModules.next();\r\n    }\r\n    return moduleSet;\r\n}\r\nexports.getModules = getModules;\r\n/**\r\n * Filters out incompatible modules from a provided array of modules\r\n * Returns a list of compatible modules\r\n */\r\nfunction filterIncompatibleModules(targetVersion, targetModules, incompatibleModules) {\r\n    let filteredModules = new Array();\r\n    for (let i = 0; i < targetModules.length; ++i) {\r\n        // We have versions that aren't compatible with this module\r\n        if (incompatibleModules.has(targetModules[i])) {\r\n            const incompatibleVersions = incompatibleModules.get(targetModules[i]);\r\n            //Extract version filters that match this version\r\n            const filteredVersions = incompatibleVersions?.filter(function (filterVersion) {\r\n                const versionRange = filterVersion.split('-');\r\n                //Check for a singular version filter (No range)\r\n                if (versionRange.length === 1) {\r\n                    // In singular version filters, an exact match means they are incompatible\r\n                    return (0, compare_unity_versions_1.compareVersions)(targetVersion, filterVersion) === 0;\r\n                }\r\n                const [bottomBound, topBound] = versionRange;\r\n                //Checking a range of versions with no bottom or top bound\r\n                if (bottomBound === '') {\r\n                    //When there is no bottom bound, the filter acts as top bound exclusive\r\n                    //so it is only incompatible if the version is less than the top bound\r\n                    return (0, compare_unity_versions_1.compareVersions)(targetVersion, topBound) < 0;\r\n                }\r\n                if (topBound === '') {\r\n                    //When there is no top bound, the filter acts bottom bound inclusive\r\n                    //so it is incompatible if it is greater than or equal to the bottom bound\r\n                    return (0, compare_unity_versions_1.compareVersions)(targetVersion, bottomBound) > -1;\r\n                }\r\n                //Same filter behavior as above but chained together for a close bound filter\r\n                return (0, compare_unity_versions_1.compareVersions)(targetVersion, bottomBound) > -1 && (0, compare_unity_versions_1.compareVersions)(targetVersion, topBound) < 0;\r\n            });\r\n            //If no filters flagged the target version, the module is compatible\r\n            if (filteredVersions?.length === 0) {\r\n                filteredModules.push(targetModules[i]);\r\n            }\r\n        }\r\n        else {\r\n            //We have no incompatibilites with this module so we can just add it\r\n            filteredModules.push(targetModules[i]);\r\n        }\r\n    }\r\n    return filteredModules;\r\n}\r\nexports.filterIncompatibleModules = filterIncompatibleModules;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TwoWayMap = void 0;\r\nclass TwoWayMap {\r\n    constructor(map) {\r\n        this.map = map;\r\n        this.reverseMap = new Map();\r\n        for (const key in map) {\r\n            const value = map.get(key);\r\n            this.reverseMap.set(key, value);\r\n        }\r\n    }\r\n    get(key) {\r\n        return this.map.get(key);\r\n    }\r\n    revGet(key) {\r\n        return this.reverseMap.get(key);\r\n    }\r\n    has(key) {\r\n        return this.map.has(key);\r\n    }\r\n    revHas(key) {\r\n        return this.reverseMap.has(key);\r\n    }\r\n}\r\nexports.TwoWayMap = TwoWayMap;\r\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.  The value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n */\nfunction error(message) {\n    command_1.issue('error', message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds an warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n */\nfunction warning(message) {\n    command_1.issue('warning', message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n//# sourceMappingURL=utils.js.map","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(822);\n",""],"names":[],"sourceRoot":""}